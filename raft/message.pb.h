// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace message {
class AppendEntriesReq;
struct AppendEntriesReqDefaultTypeInternal;
extern AppendEntriesReqDefaultTypeInternal _AppendEntriesReq_default_instance_;
class AppendEntriesRsp;
struct AppendEntriesRspDefaultTypeInternal;
extern AppendEntriesRspDefaultTypeInternal _AppendEntriesRsp_default_instance_;
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class RequestVoteReq;
struct RequestVoteReqDefaultTypeInternal;
extern RequestVoteReqDefaultTypeInternal _RequestVoteReq_default_instance_;
class RequestVoteRsp;
struct RequestVoteRspDefaultTypeInternal;
extern RequestVoteRspDefaultTypeInternal _RequestVoteRsp_default_instance_;
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> ::message::AppendEntriesReq* Arena::CreateMaybeMessage<::message::AppendEntriesReq>(Arena*);
template<> ::message::AppendEntriesRsp* Arena::CreateMaybeMessage<::message::AppendEntriesRsp>(Arena*);
template<> ::message::Entry* Arena::CreateMaybeMessage<::message::Entry>(Arena*);
template<> ::message::RequestVoteReq* Arena::CreateMaybeMessage<::message::RequestVoteReq>(Arena*);
template<> ::message::RequestVoteRsp* Arena::CreateMaybeMessage<::message::RequestVoteRsp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace message {

// ===================================================================

class RequestVoteReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RequestVoteReq) */ {
 public:
  inline RequestVoteReq() : RequestVoteReq(nullptr) {}
  ~RequestVoteReq() override;
  explicit PROTOBUF_CONSTEXPR RequestVoteReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteReq(const RequestVoteReq& from);
  RequestVoteReq(RequestVoteReq&& from) noexcept
    : RequestVoteReq() {
    *this = ::std::move(from);
  }

  inline RequestVoteReq& operator=(const RequestVoteReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteReq& operator=(RequestVoteReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteReq* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReq*>(
               &_RequestVoteReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestVoteReq& a, RequestVoteReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestVoteReq& from) {
    RequestVoteReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RequestVoteReq";
  }
  protected:
  explicit RequestVoteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kCandidateIdFieldNumber = 2,
    kLastLogIndexFieldNumber = 3,
    kLastLogTermFieldNumber = 4,
  };
  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 candidateId = 2;
  void clear_candidateid();
  int32_t candidateid() const;
  void set_candidateid(int32_t value);
  private:
  int32_t _internal_candidateid() const;
  void _internal_set_candidateid(int32_t value);
  public:

  // int32 lastLogIndex = 3;
  void clear_lastlogindex();
  int32_t lastlogindex() const;
  void set_lastlogindex(int32_t value);
  private:
  int32_t _internal_lastlogindex() const;
  void _internal_set_lastlogindex(int32_t value);
  public:

  // int32 lastLogTerm = 4;
  void clear_lastlogterm();
  int32_t lastlogterm() const;
  void set_lastlogterm(int32_t value);
  private:
  int32_t _internal_lastlogterm() const;
  void _internal_set_lastlogterm(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.RequestVoteReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t term_;
    int32_t candidateid_;
    int32_t lastlogindex_;
    int32_t lastlogterm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RequestVoteRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.RequestVoteRsp) */ {
 public:
  inline RequestVoteRsp() : RequestVoteRsp(nullptr) {}
  ~RequestVoteRsp() override;
  explicit PROTOBUF_CONSTEXPR RequestVoteRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestVoteRsp(const RequestVoteRsp& from);
  RequestVoteRsp(RequestVoteRsp&& from) noexcept
    : RequestVoteRsp() {
    *this = ::std::move(from);
  }

  inline RequestVoteRsp& operator=(const RequestVoteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestVoteRsp& operator=(RequestVoteRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestVoteRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestVoteRsp* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRsp*>(
               &_RequestVoteRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestVoteRsp& a, RequestVoteRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestVoteRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestVoteRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestVoteRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestVoteRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestVoteRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestVoteRsp& from) {
    RequestVoteRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.RequestVoteRsp";
  }
  protected:
  explicit RequestVoteRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kVoteGrantedFieldNumber = 2,
  };
  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // bool voteGranted = 2;
  void clear_votegranted();
  bool votegranted() const;
  void set_votegranted(bool value);
  private:
  bool _internal_votegranted() const;
  void _internal_set_votegranted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:message.RequestVoteRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t term_;
    bool votegranted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  ~Entry() override;
  explicit PROTOBUF_CONSTEXPR Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entry& from) {
    Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 2,
    kTermFieldNumber = 1,
  };
  // string command = 2;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    int32_t term_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AppendEntriesReq) */ {
 public:
  inline AppendEntriesReq() : AppendEntriesReq(nullptr) {}
  ~AppendEntriesReq() override;
  explicit PROTOBUF_CONSTEXPR AppendEntriesReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesReq(const AppendEntriesReq& from);
  AppendEntriesReq(AppendEntriesReq&& from) noexcept
    : AppendEntriesReq() {
    *this = ::std::move(from);
  }

  inline AppendEntriesReq& operator=(const AppendEntriesReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesReq& operator=(AppendEntriesReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesReq* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesReq*>(
               &_AppendEntriesReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AppendEntriesReq& a, AppendEntriesReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntriesReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendEntriesReq& from) {
    AppendEntriesReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AppendEntriesReq";
  }
  protected:
  explicit AppendEntriesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 4,
    kTermFieldNumber = 1,
    kPrevLogIndexFieldNumber = 2,
    kPrevLogTermFieldNumber = 3,
    kLeaderCommitFieldNumber = 5,
  };
  // repeated .message.Entry entries = 4;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::message::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Entry >*
      mutable_entries();
  private:
  const ::message::Entry& _internal_entries(int index) const;
  ::message::Entry* _internal_add_entries();
  public:
  const ::message::Entry& entries(int index) const;
  ::message::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Entry >&
      entries() const;

  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // int32 prevLogIndex = 2;
  void clear_prevlogindex();
  int32_t prevlogindex() const;
  void set_prevlogindex(int32_t value);
  private:
  int32_t _internal_prevlogindex() const;
  void _internal_set_prevlogindex(int32_t value);
  public:

  // int32 prevLogTerm = 3;
  void clear_prevlogterm();
  int32_t prevlogterm() const;
  void set_prevlogterm(int32_t value);
  private:
  int32_t _internal_prevlogterm() const;
  void _internal_set_prevlogterm(int32_t value);
  public:

  // int32 leaderCommit = 5;
  void clear_leadercommit();
  int32_t leadercommit() const;
  void set_leadercommit(int32_t value);
  private:
  int32_t _internal_leadercommit() const;
  void _internal_set_leadercommit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.AppendEntriesReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Entry > entries_;
    int32_t term_;
    int32_t prevlogindex_;
    int32_t prevlogterm_;
    int32_t leadercommit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class AppendEntriesRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:message.AppendEntriesRsp) */ {
 public:
  inline AppendEntriesRsp() : AppendEntriesRsp(nullptr) {}
  ~AppendEntriesRsp() override;
  explicit PROTOBUF_CONSTEXPR AppendEntriesRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppendEntriesRsp(const AppendEntriesRsp& from);
  AppendEntriesRsp(AppendEntriesRsp&& from) noexcept
    : AppendEntriesRsp() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRsp& operator=(const AppendEntriesRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendEntriesRsp& operator=(AppendEntriesRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppendEntriesRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppendEntriesRsp* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRsp*>(
               &_AppendEntriesRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AppendEntriesRsp& a, AppendEntriesRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendEntriesRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendEntriesRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppendEntriesRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppendEntriesRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppendEntriesRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AppendEntriesRsp& from) {
    AppendEntriesRsp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "message.AppendEntriesRsp";
  }
  protected:
  explicit AppendEntriesRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kExpectIndexFieldNumber = 3,
    kExpectTermFieldNumber = 4,
  };
  // int32 term = 1;
  void clear_term();
  int32_t term() const;
  void set_term(int32_t value);
  private:
  int32_t _internal_term() const;
  void _internal_set_term(int32_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 expectIndex = 3;
  void clear_expectindex();
  int32_t expectindex() const;
  void set_expectindex(int32_t value);
  private:
  int32_t _internal_expectindex() const;
  void _internal_set_expectindex(int32_t value);
  public:

  // int32 expectTerm = 4;
  void clear_expectterm();
  int32_t expectterm() const;
  void set_expectterm(int32_t value);
  private:
  int32_t _internal_expectterm() const;
  void _internal_set_expectterm(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:message.AppendEntriesRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t term_;
    bool success_;
    int32_t expectindex_;
    int32_t expectterm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestVoteReq

// int32 term = 1;
inline void RequestVoteReq::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t RequestVoteReq::_internal_term() const {
  return _impl_.term_;
}
inline int32_t RequestVoteReq::term() const {
  // @@protoc_insertion_point(field_get:message.RequestVoteReq.term)
  return _internal_term();
}
inline void RequestVoteReq::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void RequestVoteReq::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:message.RequestVoteReq.term)
}

// int32 candidateId = 2;
inline void RequestVoteReq::clear_candidateid() {
  _impl_.candidateid_ = 0;
}
inline int32_t RequestVoteReq::_internal_candidateid() const {
  return _impl_.candidateid_;
}
inline int32_t RequestVoteReq::candidateid() const {
  // @@protoc_insertion_point(field_get:message.RequestVoteReq.candidateId)
  return _internal_candidateid();
}
inline void RequestVoteReq::_internal_set_candidateid(int32_t value) {
  
  _impl_.candidateid_ = value;
}
inline void RequestVoteReq::set_candidateid(int32_t value) {
  _internal_set_candidateid(value);
  // @@protoc_insertion_point(field_set:message.RequestVoteReq.candidateId)
}

// int32 lastLogIndex = 3;
inline void RequestVoteReq::clear_lastlogindex() {
  _impl_.lastlogindex_ = 0;
}
inline int32_t RequestVoteReq::_internal_lastlogindex() const {
  return _impl_.lastlogindex_;
}
inline int32_t RequestVoteReq::lastlogindex() const {
  // @@protoc_insertion_point(field_get:message.RequestVoteReq.lastLogIndex)
  return _internal_lastlogindex();
}
inline void RequestVoteReq::_internal_set_lastlogindex(int32_t value) {
  
  _impl_.lastlogindex_ = value;
}
inline void RequestVoteReq::set_lastlogindex(int32_t value) {
  _internal_set_lastlogindex(value);
  // @@protoc_insertion_point(field_set:message.RequestVoteReq.lastLogIndex)
}

// int32 lastLogTerm = 4;
inline void RequestVoteReq::clear_lastlogterm() {
  _impl_.lastlogterm_ = 0;
}
inline int32_t RequestVoteReq::_internal_lastlogterm() const {
  return _impl_.lastlogterm_;
}
inline int32_t RequestVoteReq::lastlogterm() const {
  // @@protoc_insertion_point(field_get:message.RequestVoteReq.lastLogTerm)
  return _internal_lastlogterm();
}
inline void RequestVoteReq::_internal_set_lastlogterm(int32_t value) {
  
  _impl_.lastlogterm_ = value;
}
inline void RequestVoteReq::set_lastlogterm(int32_t value) {
  _internal_set_lastlogterm(value);
  // @@protoc_insertion_point(field_set:message.RequestVoteReq.lastLogTerm)
}

// -------------------------------------------------------------------

// RequestVoteRsp

// int32 term = 1;
inline void RequestVoteRsp::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t RequestVoteRsp::_internal_term() const {
  return _impl_.term_;
}
inline int32_t RequestVoteRsp::term() const {
  // @@protoc_insertion_point(field_get:message.RequestVoteRsp.term)
  return _internal_term();
}
inline void RequestVoteRsp::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void RequestVoteRsp::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:message.RequestVoteRsp.term)
}

// bool voteGranted = 2;
inline void RequestVoteRsp::clear_votegranted() {
  _impl_.votegranted_ = false;
}
inline bool RequestVoteRsp::_internal_votegranted() const {
  return _impl_.votegranted_;
}
inline bool RequestVoteRsp::votegranted() const {
  // @@protoc_insertion_point(field_get:message.RequestVoteRsp.voteGranted)
  return _internal_votegranted();
}
inline void RequestVoteRsp::_internal_set_votegranted(bool value) {
  
  _impl_.votegranted_ = value;
}
inline void RequestVoteRsp::set_votegranted(bool value) {
  _internal_set_votegranted(value);
  // @@protoc_insertion_point(field_set:message.RequestVoteRsp.voteGranted)
}

// -------------------------------------------------------------------

// Entry

// int32 term = 1;
inline void Entry::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t Entry::_internal_term() const {
  return _impl_.term_;
}
inline int32_t Entry::term() const {
  // @@protoc_insertion_point(field_get:message.Entry.term)
  return _internal_term();
}
inline void Entry::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void Entry::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:message.Entry.term)
}

// string command = 2;
inline void Entry::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& Entry::command() const {
  // @@protoc_insertion_point(field_get:message.Entry.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:message.Entry.command)
}
inline std::string* Entry::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:message.Entry.command)
  return _s;
}
inline const std::string& Entry::_internal_command() const {
  return _impl_.command_.Get();
}
inline void Entry::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* Entry::release_command() {
  // @@protoc_insertion_point(field_release:message.Entry.command)
  return _impl_.command_.Release();
}
inline void Entry::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:message.Entry.command)
}

// -------------------------------------------------------------------

// AppendEntriesReq

// int32 term = 1;
inline void AppendEntriesReq::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t AppendEntriesReq::_internal_term() const {
  return _impl_.term_;
}
inline int32_t AppendEntriesReq::term() const {
  // @@protoc_insertion_point(field_get:message.AppendEntriesReq.term)
  return _internal_term();
}
inline void AppendEntriesReq::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void AppendEntriesReq::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:message.AppendEntriesReq.term)
}

// int32 prevLogIndex = 2;
inline void AppendEntriesReq::clear_prevlogindex() {
  _impl_.prevlogindex_ = 0;
}
inline int32_t AppendEntriesReq::_internal_prevlogindex() const {
  return _impl_.prevlogindex_;
}
inline int32_t AppendEntriesReq::prevlogindex() const {
  // @@protoc_insertion_point(field_get:message.AppendEntriesReq.prevLogIndex)
  return _internal_prevlogindex();
}
inline void AppendEntriesReq::_internal_set_prevlogindex(int32_t value) {
  
  _impl_.prevlogindex_ = value;
}
inline void AppendEntriesReq::set_prevlogindex(int32_t value) {
  _internal_set_prevlogindex(value);
  // @@protoc_insertion_point(field_set:message.AppendEntriesReq.prevLogIndex)
}

// int32 prevLogTerm = 3;
inline void AppendEntriesReq::clear_prevlogterm() {
  _impl_.prevlogterm_ = 0;
}
inline int32_t AppendEntriesReq::_internal_prevlogterm() const {
  return _impl_.prevlogterm_;
}
inline int32_t AppendEntriesReq::prevlogterm() const {
  // @@protoc_insertion_point(field_get:message.AppendEntriesReq.prevLogTerm)
  return _internal_prevlogterm();
}
inline void AppendEntriesReq::_internal_set_prevlogterm(int32_t value) {
  
  _impl_.prevlogterm_ = value;
}
inline void AppendEntriesReq::set_prevlogterm(int32_t value) {
  _internal_set_prevlogterm(value);
  // @@protoc_insertion_point(field_set:message.AppendEntriesReq.prevLogTerm)
}

// repeated .message.Entry entries = 4;
inline int AppendEntriesReq::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int AppendEntriesReq::entries_size() const {
  return _internal_entries_size();
}
inline void AppendEntriesReq::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::message::Entry* AppendEntriesReq::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:message.AppendEntriesReq.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Entry >*
AppendEntriesReq::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:message.AppendEntriesReq.entries)
  return &_impl_.entries_;
}
inline const ::message::Entry& AppendEntriesReq::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::message::Entry& AppendEntriesReq::entries(int index) const {
  // @@protoc_insertion_point(field_get:message.AppendEntriesReq.entries)
  return _internal_entries(index);
}
inline ::message::Entry* AppendEntriesReq::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::message::Entry* AppendEntriesReq::add_entries() {
  ::message::Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:message.AppendEntriesReq.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::message::Entry >&
AppendEntriesReq::entries() const {
  // @@protoc_insertion_point(field_list:message.AppendEntriesReq.entries)
  return _impl_.entries_;
}

// int32 leaderCommit = 5;
inline void AppendEntriesReq::clear_leadercommit() {
  _impl_.leadercommit_ = 0;
}
inline int32_t AppendEntriesReq::_internal_leadercommit() const {
  return _impl_.leadercommit_;
}
inline int32_t AppendEntriesReq::leadercommit() const {
  // @@protoc_insertion_point(field_get:message.AppendEntriesReq.leaderCommit)
  return _internal_leadercommit();
}
inline void AppendEntriesReq::_internal_set_leadercommit(int32_t value) {
  
  _impl_.leadercommit_ = value;
}
inline void AppendEntriesReq::set_leadercommit(int32_t value) {
  _internal_set_leadercommit(value);
  // @@protoc_insertion_point(field_set:message.AppendEntriesReq.leaderCommit)
}

// -------------------------------------------------------------------

// AppendEntriesRsp

// int32 term = 1;
inline void AppendEntriesRsp::clear_term() {
  _impl_.term_ = 0;
}
inline int32_t AppendEntriesRsp::_internal_term() const {
  return _impl_.term_;
}
inline int32_t AppendEntriesRsp::term() const {
  // @@protoc_insertion_point(field_get:message.AppendEntriesRsp.term)
  return _internal_term();
}
inline void AppendEntriesRsp::_internal_set_term(int32_t value) {
  
  _impl_.term_ = value;
}
inline void AppendEntriesRsp::set_term(int32_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:message.AppendEntriesRsp.term)
}

// bool success = 2;
inline void AppendEntriesRsp::clear_success() {
  _impl_.success_ = false;
}
inline bool AppendEntriesRsp::_internal_success() const {
  return _impl_.success_;
}
inline bool AppendEntriesRsp::success() const {
  // @@protoc_insertion_point(field_get:message.AppendEntriesRsp.success)
  return _internal_success();
}
inline void AppendEntriesRsp::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void AppendEntriesRsp::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:message.AppendEntriesRsp.success)
}

// int32 expectIndex = 3;
inline void AppendEntriesRsp::clear_expectindex() {
  _impl_.expectindex_ = 0;
}
inline int32_t AppendEntriesRsp::_internal_expectindex() const {
  return _impl_.expectindex_;
}
inline int32_t AppendEntriesRsp::expectindex() const {
  // @@protoc_insertion_point(field_get:message.AppendEntriesRsp.expectIndex)
  return _internal_expectindex();
}
inline void AppendEntriesRsp::_internal_set_expectindex(int32_t value) {
  
  _impl_.expectindex_ = value;
}
inline void AppendEntriesRsp::set_expectindex(int32_t value) {
  _internal_set_expectindex(value);
  // @@protoc_insertion_point(field_set:message.AppendEntriesRsp.expectIndex)
}

// int32 expectTerm = 4;
inline void AppendEntriesRsp::clear_expectterm() {
  _impl_.expectterm_ = 0;
}
inline int32_t AppendEntriesRsp::_internal_expectterm() const {
  return _impl_.expectterm_;
}
inline int32_t AppendEntriesRsp::expectterm() const {
  // @@protoc_insertion_point(field_get:message.AppendEntriesRsp.expectTerm)
  return _internal_expectterm();
}
inline void AppendEntriesRsp::_internal_set_expectterm(int32_t value) {
  
  _impl_.expectterm_ = value;
}
inline void AppendEntriesRsp::set_expectterm(int32_t value) {
  _internal_set_expectterm(value);
  // @@protoc_insertion_point(field_set:message.AppendEntriesRsp.expectTerm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
