// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace message {
PROTOBUF_CONSTEXPR RequestVoteReq::RequestVoteReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.candidateid_)*/0
  , /*decltype(_impl_.lastlogindex_)*/0
  , /*decltype(_impl_.lastlogterm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestVoteReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteReqDefaultTypeInternal() {}
  union {
    RequestVoteReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteReqDefaultTypeInternal _RequestVoteReq_default_instance_;
PROTOBUF_CONSTEXPR RequestVoteRsp::RequestVoteRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.votegranted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestVoteRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestVoteRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestVoteRspDefaultTypeInternal() {}
  union {
    RequestVoteRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestVoteRspDefaultTypeInternal _RequestVoteRsp_default_instance_;
PROTOBUF_CONSTEXPR Entry::Entry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntryDefaultTypeInternal() {}
  union {
    Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntryDefaultTypeInternal _Entry_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesReq::AppendEntriesReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.prevlogindex_)*/0
  , /*decltype(_impl_.prevlogterm_)*/0
  , /*decltype(_impl_.leadercommit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendEntriesReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesReqDefaultTypeInternal() {}
  union {
    AppendEntriesReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesReqDefaultTypeInternal _AppendEntriesReq_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesRsp::AppendEntriesRsp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.term_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.expectindex_)*/0
  , /*decltype(_impl_.expectterm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AppendEntriesRspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesRspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesRspDefaultTypeInternal() {}
  union {
    AppendEntriesRsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesRspDefaultTypeInternal _AppendEntriesRsp_default_instance_;
}  // namespace message
static ::_pb::Metadata file_level_metadata_message_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RequestVoteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RequestVoteReq, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::message::RequestVoteReq, _impl_.candidateid_),
  PROTOBUF_FIELD_OFFSET(::message::RequestVoteReq, _impl_.lastlogindex_),
  PROTOBUF_FIELD_OFFSET(::message::RequestVoteReq, _impl_.lastlogterm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::RequestVoteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::RequestVoteRsp, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::message::RequestVoteRsp, _impl_.votegranted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::Entry, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::message::Entry, _impl_.command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesReq, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesReq, _impl_.prevlogindex_),
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesReq, _impl_.prevlogterm_),
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesReq, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesReq, _impl_.leadercommit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesRsp, _impl_.term_),
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesRsp, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesRsp, _impl_.expectindex_),
  PROTOBUF_FIELD_OFFSET(::message::AppendEntriesRsp, _impl_.expectterm_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::message::RequestVoteReq)},
  { 10, -1, -1, sizeof(::message::RequestVoteRsp)},
  { 18, -1, -1, sizeof(::message::Entry)},
  { 26, -1, -1, sizeof(::message::AppendEntriesReq)},
  { 37, -1, -1, sizeof(::message::AppendEntriesRsp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::message::_RequestVoteReq_default_instance_._instance,
  &::message::_RequestVoteRsp_default_instance_._instance,
  &::message::_Entry_default_instance_._instance,
  &::message::_AppendEntriesReq_default_instance_._instance,
  &::message::_AppendEntriesRsp_default_instance_._instance,
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\007message\"^\n\016RequestVoteR"
  "eq\022\014\n\004term\030\001 \001(\005\022\023\n\013candidateId\030\002 \001(\005\022\024\n"
  "\014lastLogIndex\030\003 \001(\005\022\023\n\013lastLogTerm\030\004 \001(\005"
  "\"3\n\016RequestVoteRsp\022\014\n\004term\030\001 \001(\005\022\023\n\013vote"
  "Granted\030\002 \001(\010\"&\n\005Entry\022\014\n\004term\030\001 \001(\005\022\017\n\007"
  "command\030\002 \001(\t\"\202\001\n\020AppendEntriesReq\022\014\n\004te"
  "rm\030\001 \001(\005\022\024\n\014prevLogIndex\030\002 \001(\005\022\023\n\013prevLo"
  "gTerm\030\003 \001(\005\022\037\n\007entries\030\004 \003(\0132\016.message.E"
  "ntry\022\024\n\014leaderCommit\030\005 \001(\005\"Z\n\020AppendEntr"
  "iesRsp\022\014\n\004term\030\001 \001(\005\022\017\n\007success\030\002 \001(\010\022\023\n"
  "\013expectIndex\030\003 \001(\005\022\022\n\nexpectTerm\030\004 \001(\0052\231"
  "\001\n\013RaftService\022A\n\013RequestVote\022\027.message."
  "RequestVoteReq\032\027.message.RequestVoteRsp\""
  "\000\022G\n\rAppendEntries\022\031.message.AppendEntri"
  "esReq\032\031.message.AppendEntriesRsp\"\000b\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false, false, 602, descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_message_2eproto::offsets,
    file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace message {

// ===================================================================

class RequestVoteReq::_Internal {
 public:
};

RequestVoteReq::RequestVoteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RequestVoteReq)
}
RequestVoteReq::RequestVoteReq(const RequestVoteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestVoteReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.candidateid_){}
    , decltype(_impl_.lastlogindex_){}
    , decltype(_impl_.lastlogterm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lastlogterm_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:message.RequestVoteReq)
}

inline void RequestVoteReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){0}
    , decltype(_impl_.candidateid_){0}
    , decltype(_impl_.lastlogindex_){0}
    , decltype(_impl_.lastlogterm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestVoteReq::~RequestVoteReq() {
  // @@protoc_insertion_point(destructor:message.RequestVoteReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestVoteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestVoteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RequestVoteReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lastlogterm_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.lastlogterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 candidateId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.candidateid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lastLogIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lastlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lastLogTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.lastlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVoteReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RequestVoteReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_candidateid(), target);
  }

  // int32 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_lastlogindex(), target);
  }

  // int32 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_lastlogterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RequestVoteReq)
  return target;
}

size_t RequestVoteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RequestVoteReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 candidateId = 2;
  if (this->_internal_candidateid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_candidateid());
  }

  // int32 lastLogIndex = 3;
  if (this->_internal_lastlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lastlogindex());
  }

  // int32 lastLogTerm = 4;
  if (this->_internal_lastlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lastlogterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestVoteReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteReq::GetClassData() const { return &_class_data_; }


void RequestVoteReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestVoteReq*>(&to_msg);
  auto& from = static_cast<const RequestVoteReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RequestVoteReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_candidateid() != 0) {
    _this->_internal_set_candidateid(from._internal_candidateid());
  }
  if (from._internal_lastlogindex() != 0) {
    _this->_internal_set_lastlogindex(from._internal_lastlogindex());
  }
  if (from._internal_lastlogterm() != 0) {
    _this->_internal_set_lastlogterm(from._internal_lastlogterm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteReq::CopyFrom(const RequestVoteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RequestVoteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReq::IsInitialized() const {
  return true;
}

void RequestVoteReq::InternalSwap(RequestVoteReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteReq, _impl_.lastlogterm_)
      + sizeof(RequestVoteReq::_impl_.lastlogterm_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteReq, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class RequestVoteRsp::_Internal {
 public:
};

RequestVoteRsp::RequestVoteRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.RequestVoteRsp)
}
RequestVoteRsp::RequestVoteRsp(const RequestVoteRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestVoteRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.votegranted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.votegranted_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.votegranted_));
  // @@protoc_insertion_point(copy_constructor:message.RequestVoteRsp)
}

inline void RequestVoteRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){0}
    , decltype(_impl_.votegranted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestVoteRsp::~RequestVoteRsp() {
  // @@protoc_insertion_point(destructor:message.RequestVoteRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestVoteRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestVoteRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestVoteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:message.RequestVoteRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.votegranted_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.votegranted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestVoteRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool voteGranted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.votegranted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestVoteRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.RequestVoteRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_votegranted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.RequestVoteRsp)
  return target;
}

size_t RequestVoteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.RequestVoteRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // bool voteGranted = 2;
  if (this->_internal_votegranted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestVoteRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestVoteRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestVoteRsp::GetClassData() const { return &_class_data_; }


void RequestVoteRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestVoteRsp*>(&to_msg);
  auto& from = static_cast<const RequestVoteRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.RequestVoteRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_votegranted() != 0) {
    _this->_internal_set_votegranted(from._internal_votegranted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestVoteRsp::CopyFrom(const RequestVoteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.RequestVoteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteRsp::IsInitialized() const {
  return true;
}

void RequestVoteRsp::InternalSwap(RequestVoteRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestVoteRsp, _impl_.votegranted_)
      + sizeof(RequestVoteRsp::_impl_.votegranted_)
      - PROTOBUF_FIELD_OFFSET(RequestVoteRsp, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestVoteRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class Entry::_Internal {
 public:
};

Entry::Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Entry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.term_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.term_ = from._impl_.term_;
  // @@protoc_insertion_point(copy_constructor:message.Entry)
}

inline void Entry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , decltype(_impl_.term_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:message.Entry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
}

void Entry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  _impl_.term_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Entry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "message.Entry.command"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // string command = 2;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "message.Entry.command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 2;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Entry::GetClassData() const { return &_class_data_; }


void Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Entry*>(&to_msg);
  auto& from = static_cast<const Entry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.Entry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
  swap(_impl_.term_, other->_impl_.term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Entry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class AppendEntriesReq::_Internal {
 public:
};

AppendEntriesReq::AppendEntriesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.AppendEntriesReq)
}
AppendEntriesReq::AppendEntriesReq(const AppendEntriesReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.term_){}
    , decltype(_impl_.prevlogindex_){}
    , decltype(_impl_.prevlogterm_){}
    , decltype(_impl_.leadercommit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leadercommit_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.leadercommit_));
  // @@protoc_insertion_point(copy_constructor:message.AppendEntriesReq)
}

inline void AppendEntriesReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , decltype(_impl_.term_){0}
    , decltype(_impl_.prevlogindex_){0}
    , decltype(_impl_.prevlogterm_){0}
    , decltype(_impl_.leadercommit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppendEntriesReq::~AppendEntriesReq() {
  // @@protoc_insertion_point(destructor:message.AppendEntriesReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void AppendEntriesReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:message.AppendEntriesReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.leadercommit_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.leadercommit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prevLogIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.prevlogindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prevLogTerm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.prevlogterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .message.Entry entries = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 leaderCommit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.leadercommit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AppendEntriesReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // int32 prevLogIndex = 2;
  if (this->_internal_prevlogindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_prevlogindex(), target);
  }

  // int32 prevLogTerm = 3;
  if (this->_internal_prevlogterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_prevlogterm(), target);
  }

  // repeated .message.Entry entries = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 leaderCommit = 5;
  if (this->_internal_leadercommit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_leadercommit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.AppendEntriesReq)
  return target;
}

size_t AppendEntriesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.AppendEntriesReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message.Entry entries = 4;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // int32 prevLogIndex = 2;
  if (this->_internal_prevlogindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prevlogindex());
  }

  // int32 prevLogTerm = 3;
  if (this->_internal_prevlogterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prevlogterm());
  }

  // int32 leaderCommit = 5;
  if (this->_internal_leadercommit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_leadercommit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesReq::GetClassData() const { return &_class_data_; }


void AppendEntriesReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesReq*>(&to_msg);
  auto& from = static_cast<const AppendEntriesReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.AppendEntriesReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_prevlogindex() != 0) {
    _this->_internal_set_prevlogindex(from._internal_prevlogindex());
  }
  if (from._internal_prevlogterm() != 0) {
    _this->_internal_set_prevlogterm(from._internal_prevlogterm());
  }
  if (from._internal_leadercommit() != 0) {
    _this->_internal_set_leadercommit(from._internal_leadercommit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesReq::CopyFrom(const AppendEntriesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.AppendEntriesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReq::IsInitialized() const {
  return true;
}

void AppendEntriesReq::InternalSwap(AppendEntriesReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesReq, _impl_.leadercommit_)
      + sizeof(AppendEntriesReq::_impl_.leadercommit_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesReq, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

class AppendEntriesRsp::_Internal {
 public:
};

AppendEntriesRsp::AppendEntriesRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:message.AppendEntriesRsp)
}
AppendEntriesRsp::AppendEntriesRsp(const AppendEntriesRsp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AppendEntriesRsp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.expectindex_){}
    , decltype(_impl_.expectterm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.term_, &from._impl_.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.expectterm_) -
    reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.expectterm_));
  // @@protoc_insertion_point(copy_constructor:message.AppendEntriesRsp)
}

inline void AppendEntriesRsp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.term_){0}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.expectindex_){0}
    , decltype(_impl_.expectterm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AppendEntriesRsp::~AppendEntriesRsp() {
  // @@protoc_insertion_point(destructor:message.AppendEntriesRsp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesRsp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesRsp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AppendEntriesRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:message.AppendEntriesRsp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.expectterm_) -
      reinterpret_cast<char*>(&_impl_.term_)) + sizeof(_impl_.expectterm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesRsp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 expectIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.expectindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 expectTerm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.expectterm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesRsp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.AppendEntriesRsp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_term(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // int32 expectIndex = 3;
  if (this->_internal_expectindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_expectindex(), target);
  }

  // int32 expectTerm = 4;
  if (this->_internal_expectterm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_expectterm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.AppendEntriesRsp)
  return target;
}

size_t AppendEntriesRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.AppendEntriesRsp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_term());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 expectIndex = 3;
  if (this->_internal_expectindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_expectindex());
  }

  // int32 expectTerm = 4;
  if (this->_internal_expectterm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_expectterm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesRsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AppendEntriesRsp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesRsp::GetClassData() const { return &_class_data_; }


void AppendEntriesRsp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AppendEntriesRsp*>(&to_msg);
  auto& from = static_cast<const AppendEntriesRsp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:message.AppendEntriesRsp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _this->_internal_set_term(from._internal_term());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_expectindex() != 0) {
    _this->_internal_set_expectindex(from._internal_expectindex());
  }
  if (from._internal_expectterm() != 0) {
    _this->_internal_set_expectterm(from._internal_expectterm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesRsp::CopyFrom(const AppendEntriesRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.AppendEntriesRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRsp::IsInitialized() const {
  return true;
}

void AppendEntriesRsp::InternalSwap(AppendEntriesRsp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesRsp, _impl_.expectterm_)
      + sizeof(AppendEntriesRsp::_impl_.expectterm_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesRsp, _impl_.term_)>(
          reinterpret_cast<char*>(&_impl_.term_),
          reinterpret_cast<char*>(&other->_impl_.term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesRsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::RequestVoteReq*
Arena::CreateMaybeMessage< ::message::RequestVoteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RequestVoteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::message::RequestVoteRsp*
Arena::CreateMaybeMessage< ::message::RequestVoteRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::RequestVoteRsp >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Entry*
Arena::CreateMaybeMessage< ::message::Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::message::AppendEntriesReq*
Arena::CreateMaybeMessage< ::message::AppendEntriesReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::AppendEntriesReq >(arena);
}
template<> PROTOBUF_NOINLINE ::message::AppendEntriesRsp*
Arena::CreateMaybeMessage< ::message::AppendEntriesRsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::message::AppendEntriesRsp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
